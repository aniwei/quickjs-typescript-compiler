// Auto-generated by scripts/gen-opcodes.ts. Do not edit manually.
// Features => bigInt: false, shortOpcodes: true
export enum OpCode {
  OP_nop = 0,
  OP_push_i32 = 1,
  OP_push_const = 2,
  OP_get_loc = 3,
  OP_get_loc_u16 = 4,
  OP_put_loc = 5,
  OP_put_loc_u16 = 6,
  OP_add = 7,
  OP_array_new = 8,
  OP_array_push = 9,
  OP_drop = 10,
  OP_dup = 11,
  OP_jmp = 12,
  OP_jmp_if_false = 13,
  OP_inc_loc = 14,
  OP_inc_loc_u16 = 15,
  OP_return_undef = 16,
  OP_lt = 17,
  OP_to_number = 18,
  OP_le = 19,
  OP_gt = 20,
  OP_ge = 21,
  OP_eq = 22,
  OP_strict_eq = 23,
  OP_to_string = 24,
}

export interface OpMeta { name: string; size: number; imm?: Array<{ name: string; size: number }>; doc?: string }
export const OPCODE_META: OpMeta[] = [
  { name: 'OP_nop', size: 1 + 0, imm: undefined, doc: `No operation` },
  { name: 'OP_push_i32', size: 1 + 4, imm: [{"name":"value","size":4}], doc: `Push 32-bit integer constant` },
  { name: 'OP_push_const', size: 1 + 2, imm: [{"name":"index","size":2}], doc: `Push constant pool entry (index)` },
  { name: 'OP_get_loc', size: 1 + 1, imm: [{"name":"index","size":1}], doc: `Load local (short index)` },
  { name: 'OP_get_loc_u16', size: 1 + 2, imm: [{"name":"index","size":2}], doc: `Load local (u16 index)` },
  { name: 'OP_put_loc', size: 1 + 1, imm: [{"name":"index","size":1}], doc: `Store local (short index)` },
  { name: 'OP_put_loc_u16', size: 1 + 2, imm: [{"name":"index","size":2}], doc: `Store local (u16 index)` },
  { name: 'OP_add', size: 1 + 0, imm: undefined, doc: `Numeric addition` },
  { name: 'OP_array_new', size: 1 + 2, imm: [{"name":"initialCapacity","size":2}], doc: `Create array with initial capacity` },
  { name: 'OP_array_push', size: 1 + 0, imm: undefined, doc: `Push TOS into array (array ref below top)` },
  { name: 'OP_drop', size: 1 + 0, imm: undefined, doc: `Drop top of stack` },
  { name: 'OP_dup', size: 1 + 0, imm: undefined, doc: `Duplicate top of stack` },
  { name: 'OP_jmp', size: 1 + 2, imm: [{"name":"offset","size":2}], doc: `Unconditional jump (relative signed 16)` },
  { name: 'OP_jmp_if_false', size: 1 + 2, imm: [{"name":"offset","size":2}], doc: `Jump if falsey` },
  { name: 'OP_inc_loc', size: 1 + 1, imm: [{"name":"index","size":1}], doc: `Increment local (short)` },
  { name: 'OP_inc_loc_u16', size: 1 + 2, imm: [{"name":"index","size":2}], doc: `Increment local (u16)` },
  { name: 'OP_return_undef', size: 1 + 0, imm: undefined, doc: `Return undefined (implicit)` },
  { name: 'OP_lt', size: 1 + 0, imm: undefined, doc: `Less-than compare: pop b, pop a, push (a<b)` },
  { name: 'OP_to_number', size: 1 + 0, imm: undefined, doc: `Convert TOS to number (JS ToNumber)` },
  { name: 'OP_le', size: 1 + 0, imm: undefined, doc: `Less-or-equal compare: push (a<=b)` },
  { name: 'OP_gt', size: 1 + 0, imm: undefined, doc: `Greater-than compare: push (a>b)` },
  { name: 'OP_ge', size: 1 + 0, imm: undefined, doc: `Greater-or-equal compare: push (a>=b)` },
  { name: 'OP_eq', size: 1 + 0, imm: undefined, doc: `Abstract equality (==) compare` },
  { name: 'OP_strict_eq', size: 1 + 0, imm: undefined, doc: `Strict equality (===) compare` },
  { name: 'OP_to_string', size: 1 + 0, imm: undefined, doc: `Convert TOS to string (JS ToString)` },
] as const

export const OPCODE_INDEX: Record<string, number> = Object.fromEntries(OPCODE_META.map((m,i)=>[m.name,i]))
