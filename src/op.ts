/*
 * QuickJS OpCode 定义 - 与 quickjs-opcode.h 保持严格一致
 * Copyright (c) 2017-2018 Fabrice Bellard
 */
export enum OP {
  invalid = 0,

  /* push values */
  push_i32 = 1,
  push_const = 2,
  fclosure = 3,
  push_atom_value = 4,
  private_symbol = 5,
  undefined = 6,
  null = 7,
  push_this = 8,
  push_false = 9,
  push_true = 10,
  object = 11,
  special_object = 12,
  rest = 13,

  /* stack operations */
  drop = 14,
  nip = 15,
  nip1 = 16,
  dup = 17,
  dup1 = 18,
  dup2 = 19,
  dup3 = 20,
  insert2 = 21,
  insert3 = 22,
  insert4 = 23,
  perm3 = 24,
  perm4 = 25,
  perm5 = 26,
  swap = 27,
  swap2 = 28,
  rot3l = 29,
  rot3r = 30,
  rot4l = 31,
  rot5l = 32,

  /* function calls */
  call_constructor = 33,
  call = 34,
  tail_call = 35,
  call_method = 36,
  tail_call_method = 37,
  array_from = 38,
  apply = 39,
  return = 40,
  return_undef = 41,
  check_ctor_return = 42,
  check_ctor = 43,
  init_ctor = 44,
  check_brand = 45,
  add_brand = 46,
  return_async = 47,
  throw = 48,
  throw_error = 49,
  eval = 50,
  apply_eval = 51,
  regexp = 52,
  get_super = 53,
  import = 54,

  /* global variables */
  check_var = 55,
  get_var_undef = 56,
  get_var = 57,
  put_var = 58,
  put_var_init = 59,
  put_var_strict = 60,

  /* references */
  get_ref_value = 61,
  put_ref_value = 62,

  /* variable definitions and property access */
  define_var = 63,
  check_define_var = 64,
  define_func = 65,
  get_field = 66,
  get_field2 = 67,
  put_field = 68,
  get_private_field = 69,
  put_private_field = 70,
  define_private_field = 71,
  get_array_el = 72,
  get_array_el2 = 73,
  get_array_el3 = 74,
  put_array_el = 75,
  get_super_value = 76,
  put_super_value = 77,
  define_field = 78,
  set_name = 79,
  set_name_computed = 80,
  set_proto = 81,
  set_home_object = 82,
  define_array_el = 83,
  append = 84,
  copy_data_properties = 85,
  define_method = 86,
  define_method_computed = 87,
  define_class = 88,
  define_class_computed = 89,

  /* local variables and arguments */
  get_loc = 90,
  put_loc = 91,
  set_loc = 92,
  get_arg = 93,
  put_arg = 94,
  set_arg = 95,
  get_var_ref = 96,
  put_var_ref = 97,
  set_var_ref = 98,
  set_loc_uninitialized = 99,
  get_loc_check = 100,
  put_loc_check = 101,
  put_loc_check_init = 102,
  get_loc_checkthis = 103,
  get_var_ref_check = 104,
  put_var_ref_check = 105,
  put_var_ref_check_init = 106,
  close_loc = 107,

  /* control flow */
  if_false = 108,
  if_true = 109,
  goto = 110,
  catch = 111,
  gosub = 112,
  ret = 113,
  nip_catch = 114,

  /* type conversions */
  to_object = 115,
  to_propkey = 116,

  /* with statement */
  with_get_var = 117,
  with_put_var = 118,
  with_delete_var = 119,
  with_make_ref = 120,
  with_get_ref = 121,

  /* references creation */
  make_loc_ref = 122,
  make_arg_ref = 123,
  make_var_ref_ref = 124,
  make_var_ref = 125,

  /* for-in/for-of and iterator operations */
  for_in_start = 126,
  for_of_start = 127,
  for_await_of_start = 128,
  for_in_next = 129,
  for_of_next = 130,
  for_await_of_next = 131,
  iterator_check_object = 132,
  iterator_get_value_done = 133,
  iterator_close = 134,
  iterator_next = 135,
  iterator_call = 136,
  initial_yield = 137,
  yield = 138,
  yield_star = 139,
  async_yield_star = 140,
  await = 141,

  /* arithmetic/logic operations */
  neg = 142,
  plus = 143,
  dec = 144,
  inc = 145,
  post_dec = 146,
  post_inc = 147,
  dec_loc = 148,
  inc_loc = 149,
  add_loc = 150,
  not = 151,
  lnot = 152,
  typeof = 153,
  delete = 154,
  delete_var = 155,
  mul = 156,
  div = 157,
  mod = 158,
  add = 159,
  sub = 160,
  pow = 161,
  shl = 162,
  sar = 163,
  shr = 164,
  lt = 165,
  lte = 166,
  gt = 167,
  gte = 168,
  instanceof = 169,
  in = 170,
  eq = 171,
  neq = 172,
  strict_eq = 173,
  strict_neq = 174,
  and = 175,
  xor = 176,
  or = 177,
  is_undefined_or_null = 178,
  private_in = 179,
  push_bigint_i32 = 180,

  /* nop 必须是最后一个非短操作码和非临时操作码 */
  nop = 181,

  /* short opcodes (仅在 SHORT_OPCODES 启用时使用) */
  push_minus1 = 200,
  push_0 = 201,
  push_1 = 202,
  push_2 = 203,
  push_3 = 204,
  push_4 = 205,
  push_5 = 206,
  push_6 = 207,
  push_7 = 208,
  push_i8 = 209,
  push_i16 = 210,
  push_const8 = 211,
  fclosure8 = 212,
  push_empty_string = 213,

  get_loc8 = 214,
  put_loc8 = 215,
  set_loc8 = 216,

  get_loc0 = 217,
  get_loc1 = 218,
  get_loc2 = 219,
  get_loc3 = 220,
  put_loc0 = 221,
  put_loc1 = 222,
  put_loc2 = 223,
  put_loc3 = 224,
  set_loc0 = 225,
  set_loc1 = 226,
  set_loc2 = 227,
  set_loc3 = 228,
  get_arg0 = 229,
  get_arg1 = 230,
  get_arg2 = 231,
  get_arg3 = 232,
  put_arg0 = 233,
  put_arg1 = 234,
  put_arg2 = 235,
  put_arg3 = 236,
  set_arg0 = 237,
  set_arg1 = 238,
  set_arg2 = 239,
  set_arg3 = 240,
  get_var_ref0 = 241,
  get_var_ref1 = 242,
  get_var_ref2 = 243,
  get_var_ref3 = 244,
  put_var_ref0 = 245,
  put_var_ref1 = 246,
  put_var_ref2 = 247,
  put_var_ref3 = 248,
  set_var_ref0 = 249,
  set_var_ref1 = 250,
  set_var_ref2 = 251,
  set_var_ref3 = 252,

  get_length = 253,

  /* short branches */
  if_false8 = 254,
  if_true8 = 255,
  goto8 = 256,
  goto16 = 257,

  /* fast calls */
  call0 = 258,
  call1 = 259,
  call2 = 260,
  call3 = 261,

  /* type checks */
  is_undefined = 262,
  is_null = 263,
  typeof_is_undefined = 264,
  typeof_is_function = 265,

  /* inline cache */
  get_field_ic = 266,
  get_field2_ic = 267,
  put_field_ic = 268,

  /* debug */
  debugger = 269,
}
