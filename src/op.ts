/* 
 * QuickJS OpCode 定义 - 与 quickjs-opcode.h 保持严格一致
 * Copyright (c) 2017-2018 Fabrice Bellard
 */
export enum OP {
  // 基础操作 (与 quickjs-opcode.h 的 DEF 宏定义对应)
  invalid = 0,

  // 基础堆栈操作
  push_i32 = 1,
  push_const = 2,
  fclosure = 3,
  push_atom_value = 4,
  private_symbol = 5,
  undefined = 6,
  null = 7,
  push_this = 8,
  push_false = 9,
  push_true = 10,
  object = 11,
  special_object = 12,
  rest = 13,
  drop = 14,
  nip = 15,
  nip1 = 16,
  dup = 17,
  dup1 = 18,
  dup2 = 19,
  dup3 = 20,
  insert2 = 21,
  insert3 = 22,
  insert4 = 23,
  perm3 = 24,
  perm4 = 25,
  perm5 = 26,
  swap = 27,
  swap2 = 28,
  rot3l = 29,
  rot3r = 30,
  rot4l = 31,
  rot5l = 32,

  // 函数调用
  call_constructor = 33,
  call = 34,
  tail_call = 35,
  call_method = 36,
  tail_call_method = 37,
  array_from = 38,
  apply = 39,
  return = 40,
  return_undef = 41,
  check_ctor_return = 42,
  check_ctor = 43,
  check_brand = 44,
  add_brand = 45,
  return_async = 46,
  throw = 47,
  eval = 48,
  apply_eval = 49,
  regexp = 50,
  get_super = 51,
  import = 52,

  // 全局变量操作
  check_var = 53,
  get_var_undef = 54,
  get_var = 55,
  put_var = 56,
  put_var_init = 57,
  put_var_strict = 58,

  // 引用操作
  get_ref_value = 60,
  put_ref_value = 61,

  // 变量定义
  define_var = 62,
  check_define_var = 63,
  define_func = 64,

  // 字段访问
  get_field = 65,
  get_field2 = 66,
  put_field = 67,
  get_private_field = 68,
  put_private_field = 69,
  define_private_field = 70,

  // 数组元素
  get_array_el = 71,
  get_array_el2 = 72,
  put_array_el = 73,
  get_ref_array_el = 74,
  put_ref_array_el = 75,
  get_super_value = 76,
  put_super_value = 77,
  define_field = 78,
  set_name = 79,
  set_name_computed = 80,
  set_proto = 81,
  set_home_object = 82,
  define_array_el = 83,
  append = 84,
  copy_data_properties = 85,
  define_method = 86,
  define_method_computed = 87,
  define_class = 88,
  define_class_computed = 89,

  // 局部变量和参数 
  get_loc = 90,
  put_loc = 91,
  set_loc = 92,
  get_arg = 93,
  put_arg = 94,
  set_arg = 95,
  get_var_ref = 96,
  put_var_ref = 97,
  set_var_ref = 98,
  set_loc_uninitialized = 99,
  get_loc_check = 100,
  put_loc_check = 101,
  put_loc_check_init = 102,
  get_var_ref_check = 103,
  put_var_ref_check = 104,
  put_var_ref_check_init = 105,
  close_loc = 106,
  if_false = 107,
  if_true = 108,
  goto = 109,
  catch = 110,
  gosub = 111,
  ret = 112,
  nip_catch = 113,
  to_object = 114,
  to_propkey = 115,
  to_propkey2 = 116,

  // with 语句操作
  with_get_var = 117,
  with_put_var = 118,
  with_delete_var = 119,
  with_make_ref = 120,
  with_get_ref = 121,
  with_get_this = 122,

  // 引用创建
  make_loc_ref = 123,
  make_arg_ref = 124,
  make_var_ref_ref = 125,
  make_var_ref = 126,

  // 迭代器操作
  for_in_start = 127,
  for_of_start = 128,
  for_await_of_start = 129,
  for_in_next = 130,
  for_of_next = 131,
  for_await_of_next = 132,
  iterator_check_object = 133,
  iterator_get_value_done = 134,
  iterator_close = 135,
  iterator_next = 136,
  iterator_call = 137,
  initial_yield = 138,
  yield = 139,
  yield_star = 140,
  async_yield_star = 141,
  await = 142,

  // 算术/逻辑操作
  neg = 143,
  plus = 144,
  dec = 145,
  inc = 146,
  post_dec = 147,
  post_inc = 148,
  dec_loc = 149,
  inc_loc = 150,
  add_loc = 151,
  not = 152,
  lnot = 153,
  typeof = 154,
  delete = 155,
  delete_var = 156,
  mul = 157,
  div = 158,
  mod = 159,
  add = 160,
  sub = 161,
  pow = 162,
  shl = 163,
  sar = 164,
  shr = 165,
  lt = 166,
  lte = 167,
  gt = 168,
  gte = 169,
  instanceof = 170,
  in = 171,
  eq = 172,
  neq = 173,
  strict_eq = 174,
  strict_neq = 175,
  and = 176,
  xor = 177,
  or = 178,

  // 短操作码（仅在 SHORT_OPCODES 启用时）
  push_minus1 = 179,
  push_0 = 180,
  push_1 = 181,
  push_2 = 182,
  push_3 = 183,
  push_4 = 184,
  push_5 = 185,
  push_6 = 186,
  push_7 = 187,
  push_i8 = 188,
  push_i16 = 189,
  push_const8 = 190,
  fclosure8 = 191,
  push_empty_string = 192,
  get_length = 193,
  if_false8 = 194,
  if_true8 = 195,
  goto8 = 196,
  goto16 = 197,
  call0 = 198,
  call1 = 199,
  call2 = 200,
  call3 = 201,
  is_undefined_or_null = 202,
  
  // 快速访问器（0-3）
  get_loc0 = 203,
  get_loc1 = 204,
  get_loc2 = 205,
  get_loc3 = 206,
  put_loc0 = 207,
  put_loc1 = 208,
  put_loc2 = 209,
  put_loc3 = 210,
  set_loc0 = 211,
  set_loc1 = 212,
  set_loc2 = 213,
  set_loc3 = 214,
  get_arg0 = 215,
  get_arg1 = 216,
  get_arg2 = 217,
  get_arg3 = 218,
  put_arg0 = 219,
  put_arg1 = 220,
  put_arg2 = 221,
  put_arg3 = 222,
  set_arg0 = 223,
  set_arg1 = 224,
  set_arg2 = 225,
  set_arg3 = 226,
  get_var_ref0 = 227,
  get_var_ref1 = 228,
  get_var_ref2 = 229,
  get_var_ref3 = 230,
  put_var_ref0 = 231,
  put_var_ref1 = 232,
  put_var_ref2 = 233,
  put_var_ref3 = 234,
  set_var_ref0 = 235,
  set_var_ref1 = 236,
  set_var_ref2 = 237,
  set_var_ref3 = 238,

  // 优化操作（类型检查）
  typeof_is_undefined = 239,
  typeof_is_function = 240,
  
  // 内联缓存操作
  nop = 241,
  push_atom_value_ic = 242,
  get_var_ic = 243,
  put_var_ic = 244,
  get_field_ic = 245,
  get_field2_ic = 246,
  put_field_ic = 247,
  
  // 调试和其他
  debugger = 248,
  
  // 作用域操作（编译时生成，最终转换为其他操作码）
  scope_get_var_undef = 249,    // 编译阶段1生成，阶段2移除
  scope_get_var = 250,          // 编译阶段1生成，阶段2移除
  scope_put_var = 251,          // 编译阶段1生成，阶段2移除
  scope_delete_var = 252,       // 编译阶段1生成，阶段2移除
  scope_make_ref = 253,         // 编译阶段1生成，阶段2移除
  scope_get_ref = 254,          // 编译阶段1生成，阶段2移除
  scope_put_var_init = 255,     // 编译阶段1生成，阶段2移除
}
