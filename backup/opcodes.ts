// Auto-generated by scripts/gen-opcodes.ts. Do not edit manually.
// Features => bigInt: false, shortOpcodes: true
export enum OpCode {
  OP_nop = 0,
  OP_push_i32 = 1,
  OP_push_const = 2,
  OP_get_loc = 3,
  OP_put_loc = 4,
  OP_add = 5,
  OP_array_from = 6,
  OP_drop = 7,
  OP_dup = 8,
  OP_goto = 9,
  OP_if_false = 10,
  OP_inc_loc = 11,
  OP_return_undef = 12,
  OP_lt = 13,
  OP_lte = 14,
  OP_gt = 15,
  OP_gte = 16,
  OP_eq = 17,
  OP_strict_eq = 18,
  OP_object = 19,
  OP_define_field = 20,
  OP_get_field2 = 21,
  OP_put_field = 22,
  OP_call_method = 23,
  OP_define_array_el = 24,
  OP_append = 25,
  // appended to keep existing opcode numbers stable
  OP_dup1 = 26,
  OP_inc = 27,
  // short opcodes appended
  OP_get_loc0 = 28,
  OP_get_loc1 = 29,
  OP_get_loc2 = 30,
  OP_put_loc0 = 31,
  OP_put_loc1 = 32,
  OP_put_loc2 = 33,
  OP_goto8 = 34,
  OP_if_false8 = 35,
  // newly appended for lexical TDZ semantics
  OP_get_loc_check = 36,
  OP_put_loc_check = 37,
  OP_put_loc_check_init = 38,
  OP_put_var = 39,
  OP_put_var_strict = 40,
  OP_get_var_undef = 41,
  OP_get_var = 42,
  OP_check_define_var = 43,
  // small constant short forms (appended)
  OP_push_0 = 44,
  OP_push_i8 = 45,
  // stack shorthands for post-inc lowering compatibility
  OP_nip = 46,
  // more short forms
  OP_get_loc8 = 47,
  OP_put_loc8 = 48,
  OP_push_const8 = 49,
  OP_define_func = 50,
  OP_fclosure = 51,
  OP_fclosure8 = 52,
  OP_call = 53,
  OP_undefined = 54,
  OP_return = 55,
  OP_get_arg = 56,
  OP_put_arg = 57,
  // element access helpers (appended)
  OP_get_array_el = 58,
  OP_put_array_el = 59,
  // stack manipulation helpers for pure-stack ++/-- lowering
  OP_swap = 60,
  OP_rot3r = 61,
  OP_rot4l = 62,
}

export interface OpMeta { name: string; size: number; imm?: Array<{ name: string; size: number }>; doc?: string }
export const OPCODE_META: OpMeta[] = [
  { name: 'OP_nop', size: 1 + 0, imm: undefined, doc: `No operation` },
  { name: 'OP_push_i32', size: 1 + 4, imm: [{"name":"value","size":4}], doc: `Push 32-bit integer constant` },
  { name: 'OP_push_const', size: 1 + 2, imm: [{"name":"index","size":2}], doc: `Push constant pool entry (index)` },
  { name: 'OP_get_loc', size: 1 + 2, imm: [{"name":"index","size":2}], doc: `Load local (u16 index)` },
  { name: 'OP_put_loc', size: 1 + 2, imm: [{"name":"index","size":2}], doc: `Store local (u16 index)` },
  { name: 'OP_add', size: 1 + 0, imm: undefined, doc: `Numeric addition` },
  { name: 'OP_array_from', size: 1 + 2, imm: [{"name":"argc","size":2}], doc: `Create array from stack values (argc items)` },
  { name: 'OP_drop', size: 1 + 0, imm: undefined, doc: `Drop top of stack` },
  { name: 'OP_dup', size: 1 + 0, imm: undefined, doc: `Duplicate top of stack` },
  { name: 'OP_goto', size: 1 + 4, imm: [{"name":"offset","size":4}], doc: `Unconditional jump (relative signed 32)` },
  { name: 'OP_if_false', size: 1 + 4, imm: [{"name":"offset","size":4}], doc: `Jump if falsey (relative signed 32)` },
  { name: 'OP_inc_loc', size: 1 + 1, imm: [{"name":"index","size":1}], doc: `Increment local (8-bit index, QuickJS short form)` },
  { name: 'OP_return_undef', size: 1 + 0, imm: undefined, doc: `Return undefined (implicit)` },
  { name: 'OP_lt', size: 1 + 0, imm: undefined, doc: `Less-than comparison` },
  { name: 'OP_lte', size: 1 + 0, imm: undefined, doc: `Less-or-equal comparison` },
  { name: 'OP_gt', size: 1 + 0, imm: undefined, doc: `Greater-than comparison` },
  { name: 'OP_gte', size: 1 + 0, imm: undefined, doc: `Greater-or-equal comparison` },
  { name: 'OP_eq', size: 1 + 0, imm: undefined, doc: `Abstract equality` },
  { name: 'OP_strict_eq', size: 1 + 0, imm: undefined, doc: `Strict equality` },
  { name: 'OP_object', size: 1 + 0, imm: undefined, doc: `Create empty object` },
  { name: 'OP_define_field', size: 1 + 4, imm: [{"name":"atom","size":4}], doc: `Define own data property by atom name (consumes obj, value)` },
  { name: 'OP_get_field2', size: 1 + 4, imm: [{"name":"atom","size":4}], doc: `Get property by atom (consumes obj)` },
  { name: 'OP_put_field', size: 1 + 4, imm: [{"name":"atom","size":4}], doc: `Put property by atom (consumes obj,value)` },
  { name: 'OP_call_method', size: 1 + 2, imm: [{"name":"argc","size":2}], doc: `Call method with argc, expects [obj, func, ...args]` },
  { name: 'OP_define_array_el', size: 1 + 0, imm: undefined, doc: `Define array element: [arr, index, value] -> [arr, index]` },
  { name: 'OP_append', size: 1 + 0, imm: undefined, doc: `Append enumerate result into array: [arr, pos, enumobj] -> [arr, pos]` },
  { name: 'OP_dup1', size: 1 + 0, imm: undefined, doc: `Duplicate stack[-2] before top: a b -> a a b` },
  { name: 'OP_inc', size: 1 + 0, imm: undefined, doc: `Increment top of stack (numeric ++ on TOS)` },
  { name: 'OP_get_loc0', size: 1 + 0, imm: undefined, doc: `Load local #0 (short)` },
  { name: 'OP_get_loc1', size: 1 + 0, imm: undefined, doc: `Load local #1 (short)` },
  { name: 'OP_get_loc2', size: 1 + 0, imm: undefined, doc: `Load local #2 (short)` },
  { name: 'OP_put_loc0', size: 1 + 0, imm: undefined, doc: `Store local #0 (short)` },
  { name: 'OP_put_loc1', size: 1 + 0, imm: undefined, doc: `Store local #1 (short)` },
  { name: 'OP_put_loc2', size: 1 + 0, imm: undefined, doc: `Store local #2 (short)` },
  { name: 'OP_goto8', size: 1 + 1, imm: [{"name":"offset","size":1}], doc: `Jump (relative signed 8)` },
  { name: 'OP_if_false8', size: 1 + 1, imm: [{"name":"offset","size":1}], doc: `Jump if falsey (relative signed 8)` },
  { name: 'OP_get_loc_check', size: 1 + 2, imm: [{"name":"index","size":2}], doc: `Load lexical (TDZ check) (u16 index)` },
  { name: 'OP_put_loc_check', size: 1 + 2, imm: [{"name":"index","size":2}], doc: `Store lexical (TDZ check) (u16 index)` },
  { name: 'OP_put_loc_check_init', size: 1 + 2, imm: [{"name":"index","size":2}], doc: `Initialize lexical (TDZ clear) (u16 index)` },
  { name: 'OP_put_var', size: 1 + 4, imm: [{"name":"atom","size":4}], doc: `Put global/environment variable by atom` },
  { name: 'OP_put_var_strict', size: 1 + 4, imm: [{"name":"atom","size":4}], doc: `Put global/environment variable by atom (strict)` },
  { name: 'OP_get_var_undef', size: 1 + 4, imm: [{"name":"atom","size":4}], doc: `Get global/environment variable (undef if missing)` },
  { name: 'OP_get_var', size: 1 + 4, imm: [{"name":"atom","size":4}], doc: `Get global/environment variable (throw if missing)` },
  // atom + u8 flags per QuickJS OP_FMT_atom_u8
  { name: 'OP_check_define_var', size: 1 + 5, imm: [{"name":"atom","size":4},{"name":"flags","size":1}], doc: `Pre-check defining a global var (atom + flags u8)` },
  // short constant forms
  { name: 'OP_push_0', size: 1 + 0, imm: undefined, doc: `Push small int 0 (short)` },
  { name: 'OP_push_i8', size: 1 + 1, imm: [{"name":"value","size":1}], doc: `Push signed 8-bit integer (short)` },
  { name: 'OP_nip', size: 1 + 0, imm: undefined, doc: `Pop stack[-2]: a b -> b` },
  { name: 'OP_get_loc8', size: 1 + 1, imm: [{"name":"index","size":1}], doc: `Load local (8-bit index)` },
  { name: 'OP_put_loc8', size: 1 + 1, imm: [{"name":"index","size":1}], doc: `Store local (8-bit index)` },
  { name: 'OP_push_const8', size: 1 + 1, imm: [{"name":"index","size":1}], doc: `Push const pool entry (8-bit index)` },
  { name: 'OP_define_func', size: 1 + 5, imm: [{"name":"atom","size":4},{"name":"flags","size":1}], doc: `Define function binding (atom + flags u8), consumes function object on TOS` },
  { name: 'OP_fclosure', size: 1 + 2, imm: [{"name":"index","size":2}], doc: `Create function object from constant function bytecode (u16 index)` },
  { name: 'OP_fclosure8', size: 1 + 1, imm: [{"name":"index","size":1}], doc: `Create function object from constant function bytecode (u8 index)` },
  { name: 'OP_call', size: 1 + 2, imm: [{"name":"argc","size":2}], doc: `Call function (expects [func, this, ...args])` },
  { name: 'OP_undefined', size: 1 + 0, imm: undefined, doc: `Push undefined` },
  { name: 'OP_return', size: 1 + 0, imm: undefined, doc: `Return with TOS as value` },
  { name: 'OP_get_arg', size: 1 + 2, imm: [{"name":"index","size":2}], doc: `Load argument (u16 index)` },
  { name: 'OP_put_arg', size: 1 + 2, imm: [{"name":"index","size":2}], doc: `Store argument (u16 index)` },
  { name: 'OP_get_array_el', size: 1 + 0, imm: undefined, doc: `Get array element: [arr, index] -> [value]` },
  { name: 'OP_put_array_el', size: 1 + 0, imm: undefined, doc: `Put array element: [arr, index, value] -> []` },
  { name: 'OP_swap', size: 1 + 0, imm: undefined, doc: `Swap top two stack values: a b -> b a` },
  { name: 'OP_rot3r', size: 1 + 0, imm: undefined, doc: `Rotate right 3: a b c -> c a b` },
  { name: 'OP_rot4l', size: 1 + 0, imm: undefined, doc: `Rotate left 4: a b c d -> b c d a` },
] as const

export const OPCODE_INDEX: Record<string, number> = Object.fromEntries(OPCODE_META.map((m,i)=>[m.name,i]))

// Lightweight runtime lookup used by emitter/assembler (kept in-sync with OPCODE_META)
export const OPCODE_LOOKUP: Record<number, OpMeta & { code: number; fmt?: string }> = Object.fromEntries(
  OPCODE_META.map((m, i) => {
    let fmt: string | undefined
    if (m.name === 'OP_push_i32') fmt = 'i32'
    else if (m.name === 'OP_push_const' || m.name === 'OP_push_const8' || m.name === 'OP_fclosure' || m.name === 'OP_fclosure8') fmt = 'const'
    else if (m.name === 'OP_get_loc' || m.name === 'OP_put_loc' || m.name === 'OP_get_loc_check' || m.name === 'OP_put_loc_check' || m.name === 'OP_put_loc_check_init') fmt = 'loc'
    else if (m.name === 'OP_inc_loc' || m.name === 'OP_get_loc8' || m.name === 'OP_put_loc8') fmt = 'loc8'
    else if (m.name === 'OP_get_arg' || m.name === 'OP_put_arg') fmt = 'arg'
    else if (m.name === 'OP_goto' || m.name === 'OP_if_false') fmt = 'label'
    else if (m.name === 'OP_goto8' || m.name === 'OP_if_false8') fmt = 'label8'
    else if (m.name === 'OP_array_from') fmt = 'u16'
    else if (m.name === 'OP_define_field' || m.name === 'OP_get_field2') fmt = 'atom'
    else if (m.name === 'OP_put_field' || m.name === 'OP_put_var' || m.name === 'OP_put_var_strict' || m.name === 'OP_get_var' || m.name === 'OP_get_var_undef' || m.name === 'OP_check_define_var' || m.name === 'OP_define_func') fmt = 'atom'
    return [i, { ...m, code: i, fmt }]
  })
) as any
