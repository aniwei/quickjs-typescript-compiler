import { readFileSync, writeFileSync } from 'node:fs'
import { resolve } from 'node:path'

interface FeatureConfig { bigInt: boolean; shortOpcodes: boolean }
interface Config { features: FeatureConfig }

// We design a minimal opcode set aligned stylistically with QuickJS.
// Not parsing C headers; instead we hand-maintain a table referencing QuickJS naming.
// Each opcode has: name, operands (immediate sizes), feature conditions.
// For extensibility, bigInt or shortOpcodes can inject alternative op variants.

interface OpcodeDef {
  name: string
  imm?: Array<{ name: string; size: number }> // size in bytes
  feature?: 'bigInt' | 'shortOpcodes'
  aliasOf?: string // if this opcode becomes an alias when a feature enabled
  doc?: string
}

const baseOpcodes: OpcodeDef[] = [
  { name: 'OP_nop', doc: 'No operation' },
  { name: 'OP_push_i32', imm: [{ name: 'value', size: 4 }], doc: 'Push 32-bit integer constant' },
  { name: 'OP_push_const', imm: [{ name: 'index', size: 2 }], doc: 'Push constant pool entry (index)' },
  { name: 'OP_get_loc', imm: [{ name: 'index', size: 1 }], feature: 'shortOpcodes', doc: 'Load local (short index)' },
  { name: 'OP_get_loc_u16', imm: [{ name: 'index', size: 2 }], doc: 'Load local (u16 index)' },
  { name: 'OP_put_loc', imm: [{ name: 'index', size: 1 }], feature: 'shortOpcodes', doc: 'Store local (short index)' },
  { name: 'OP_put_loc_u16', imm: [{ name: 'index', size: 2 }], doc: 'Store local (u16 index)' },
  { name: 'OP_add', doc: 'Numeric addition' },
  { name: 'OP_array_new', imm: [{ name: 'initialCapacity', size: 2 }], doc: 'Create array with initial capacity' },
  { name: 'OP_array_push', doc: 'Push TOS into array (array ref below top)' },
  { name: 'OP_drop', doc: 'Drop top of stack' },
  { name: 'OP_dup', doc: 'Duplicate top of stack' },
  { name: 'OP_jmp', imm: [{ name: 'offset', size: 2 }], doc: 'Unconditional jump (relative signed 16)' },
  { name: 'OP_jmp_if_false', imm: [{ name: 'offset', size: 2 }], doc: 'Jump if falsey' },
  { name: 'OP_inc_loc', imm: [{ name: 'index', size: 1 }], feature: 'shortOpcodes', doc: 'Increment local (short)' },
  { name: 'OP_inc_loc_u16', imm: [{ name: 'index', size: 2 }], doc: 'Increment local (u16)' },
  { name: 'OP_return_undef', doc: 'Return undefined (implicit)' },
]

const bigIntExtra: OpcodeDef[] = [
  { name: 'OP_add_bigint', feature: 'bigInt', doc: 'BigInt addition specialized' }
]

function filterAndNumber(
  opcodes: OpcodeDef[], 
  features: FeatureConfig
) {
  const list: OpcodeDef[] = []

  for (const op of opcodes) {
    if (op.feature === 'bigInt' && !features.bigInt) continue
    if (op.feature === 'shortOpcodes' && !features.shortOpcodes) continue

    list.push(op)
  }

  return list
}

function gen() {
  const cfgPath = resolve(process.cwd(), 'opcodes.config.json')
  const cfg: Config = JSON.parse(readFileSync(cfgPath, 'utf8'))

  let ops = [ ...baseOpcodes, ...bigIntExtra ]
  ops = filterAndNumber(ops, cfg.features)

  const enumLines: string[] = []
  const metaLines: string[] = []
  
  enumLines.push('export enum OpCode {')
  ops.forEach((op, idx) => {
    enumLines.push(`  ${op.name} = ${idx},`)
    const imm = op.imm ? JSON.stringify(op.imm) : 'undefined'
    const doc = op.doc?.replace(/`/g, '\\`') || ''
    metaLines.push(`  { name: '${op.name}', size: 1 + ${(op.imm||[]).reduce((a,b)=>a+b.size,0)}, imm: ${imm}, doc: \`${doc}\` },`)
  })
  
  enumLines.push('}')

  const content = `// Auto-generated by scripts/gen-opcodes.ts. Do not edit manually.\n` +
`// Features => bigInt: ${cfg.features.bigInt}, shortOpcodes: ${cfg.features.shortOpcodes}\n` +
`${enumLines.join('\n')}\n\n` +
`export interface OpMeta { name: string; size: number; imm?: Array<{ name: string; size: number }>; doc?: string }\n` +
`export const OPCODE_META: OpMeta[] = [\n${metaLines.join('\n')}\n] as const\n\n` +
`export const OPCODE_INDEX: Record<string, number> = Object.fromEntries(OPCODE_META.map((m, i) => [m.name, i]))\n`

  writeFileSync(resolve(process.cwd(), 'src/opcodes.ts'), content, 'utf8')
}

if (require.main === module) {
  gen()
}

export { gen }
