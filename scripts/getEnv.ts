import * as fs from 'node:fs'
import { QuickJSLib } from './QuickJSLib'

type Atom = { id: number; key: string }
type Opcode = { name: string; code: number }

function toEnumKey(raw: string, prefix: string): string {
  // 1) 将字符串转为大写
  let key = String(raw).toUpperCase()
  // 2) 非字母数字与 $ 替换为下划线
  key = key.replace(/[^A-Z0-9$]/g, '_')
  // 3) 避免以数字开头
  if (/^[0-9]/.test(key)) key = `${prefix}_${key}`
  // 4) 避免空键
  if (!key.length) key = `${prefix}_EMPTY`
  // 5) 避免重复下划线的冗余
  key = key.replace(/_+/g, '_')
  // 6) 去除首尾下划线
  key = key.replace(/^_+|_+$/g, '')
  // 再次兜底
  if (!key.length) key = `${prefix}_EMPTY`
  return key
}

async function main() {
  const [compileOptions, bytecodeVersion, firstAtomId] = await Promise.all([
    QuickJSLib.getCompileOptions(),
    QuickJSLib.getBytecodeVersion(),
    QuickJSLib.getFirstAtomId(),
  ])

  const [atomsList, opcodeList] = await Promise.all([
    QuickJSLib.getAllAtoms(),
    QuickJSLib.getAllOpcodes(),
  ])
  const opformatRecord = await QuickJSLib.getAllOpcodeFormats()

  // 去重与清洗 atoms（按 id 去重，优先保留首次出现的名称）
  const seenAtomIds = new Set<number>()
  const atomEntries: Array<{ key: string; id: number }> = []
  const usedAtomEnumKeys = new Set<string>()

  for (const a of atomsList as Atom[]) {
    if (seenAtomIds.has(a.id)) continue
    let enumKey = toEnumKey(a.key, 'ATOM')
    // 处理可能的重名（不同原始 key 清洗后重名）
    let candidate = enumKey
    let dedup = 1
    while (usedAtomEnumKeys.has(candidate)) {
      candidate = `${enumKey}_${++dedup}`
    }
    enumKey = candidate
    usedAtomEnumKeys.add(enumKey)
    seenAtomIds.add(a.id)
    atomEntries.push({ key: enumKey, id: a.id })
  }

  // Opcodes 与 OpFormats 也做有序输出（按 id/code 排序）
  const opcodes = (opcodeList as Opcode[]).slice().sort((a, b) => a.code - b.code)
  const opformats = Object.entries(opformatRecord as Record<string, number>)
    .map(([name, id]) => ({ name, id }))
    .sort((a, b) => a.id - b.id)

  const header = `// This file is auto-generated by scripts/getEnv.ts
// Do not edit manually.
// Generated at: ${new Date().toISOString()}
`

  const compiledFlagsEnum = `export enum CompiledFlags {
  COMPILED_FLAG_NONE = 0,
  COMPILED_FLAG_DUMP = 1 << 0,
  COMPILED_FLAG_BIGNUM = 1 << 1,
}
`

  const opformatEnum = `export enum OpFormat {
${opformats.map(f => `  ${toEnumKey(f.name, 'OPFMT')} = ${f.id},`).join('\n')}
}
`

  const opcodeEnum = `export enum Opcode {
${opcodes.map(o => `  ${toEnumKey(o.name, 'OP')} = ${o.code},`).join('\n')}
}
`

  // 直接导出从 QuickJS 名称（如 'add','push_i32'）到数值 code 的映射，便于 TS 侧使用
  const opcodeNameToCode = `export const OPCODE_NAME_TO_CODE: Record<string, number> = {
${opcodes.map(o => `  ${JSON.stringify(o.name)}: ${o.code},`).join('\n')}
}
`

  const atomEnum = `export enum JSAtom {
${atomEntries.map(a => `  ${a.key} = ${a.id},`).join('\n')}
}
`

  // 额外导出一个从 id 到原始字符串名称的映射，供编译器原子表初始化使用
  const uniqueAtoms = (atomsList as Atom[])
    .filter((a, idx, arr) => arr.findIndex(x => x.id === a.id) === idx)
    .sort((a, b) => a.id - b.id)

  const atomStrings = `export const ATOM_STRINGS: Record<number, string> = {
${uniqueAtoms.map(a => `  ${a.id}: ${JSON.stringify(a.key)},`).join('\n')}
}
`

  const envBlock = `export interface Env {
  bytecodeVersion: number
  compileOptions: number
  firstAtomId: number
}

export const env = {
  bytecodeVersion: ${bytecodeVersion},
  compileOptions: ${compileOptions},
  firstAtomId: ${firstAtomId},
} as const
`

  // Base opcode metadata (id/size/nPop/nPush/format) centralized in env
  // Note: short opcodes are produced conditionally in TS by getShortOpcodes()
  const opcodeDefs = `export interface OpcodeDefinition {
  id: string
  size: number
  nPop: number
  nPush: number
  format: OpFormat
}

export const OPCODE_DEFS: Record<string, OpcodeDefinition> = {
  // Invalid opcode
  INVALID: { id: 'invalid', size: 1, nPop: 0, nPush: 0, format: OpFormat.NONE },

  // Push values
  PUSH_I32: { id: 'push_i32', size: 5, nPop: 0, nPush: 1, format: OpFormat.I32 },
  PUSH_CONST: { id: 'push_const', size: 5, nPop: 0, nPush: 1, format: OpFormat.CONST },
  FCLOSURE: { id: 'fclosure', size: 5, nPop: 0, nPush: 1, format: OpFormat.CONST },
  PUSH_ATOM_VALUE: { id: 'push_atom_value', size: 5, nPop: 0, nPush: 1, format: OpFormat.ATOM },
  PRIVATE_SYMBOL: { id: 'private_symbol', size: 5, nPop: 0, nPush: 1, format: OpFormat.ATOM },
  UNDEFINED: { id: 'undefined', size: 1, nPop: 0, nPush: 1, format: OpFormat.NONE },
  NULL: { id: 'null', size: 1, nPop: 0, nPush: 1, format: OpFormat.NONE },
  PUSH_THIS: { id: 'push_this', size: 1, nPop: 0, nPush: 1, format: OpFormat.NONE },
  PUSH_FALSE: { id: 'push_false', size: 1, nPop: 0, nPush: 1, format: OpFormat.NONE },
  PUSH_TRUE: { id: 'push_true', size: 1, nPop: 0, nPush: 1, format: OpFormat.NONE },
  OBJECT: { id: 'object', size: 1, nPop: 0, nPush: 1, format: OpFormat.NONE },
  SPECIAL_OBJECT: { id: 'special_object', size: 2, nPop: 0, nPush: 1, format: OpFormat.U8 },
  REST: { id: 'rest', size: 3, nPop: 0, nPush: 1, format: OpFormat.U16 },

  // Stack operations
  DROP: { id: 'drop', size: 1, nPop: 1, nPush: 0, format: OpFormat.NONE },
  NIP: { id: 'nip', size: 1, nPop: 2, nPush: 1, format: OpFormat.NONE },
  NIP1: { id: 'nip1', size: 1, nPop: 3, nPush: 2, format: OpFormat.NONE },
  DUP: { id: 'dup', size: 1, nPop: 1, nPush: 2, format: OpFormat.NONE },
  DUP1: { id: 'dup1', size: 1, nPop: 2, nPush: 3, format: OpFormat.NONE },
  DUP2: { id: 'dup2', size: 1, nPop: 2, nPush: 4, format: OpFormat.NONE },
  DUP3: { id: 'dup3', size: 1, nPop: 3, nPush: 6, format: OpFormat.NONE },
  INSERT2: { id: 'insert2', size: 1, nPop: 2, nPush: 3, format: OpFormat.NONE },
  INSERT3: { id: 'insert3', size: 1, nPop: 3, nPush: 4, format: OpFormat.NONE },
  INSERT4: { id: 'insert4', size: 1, nPop: 4, nPush: 5, format: OpFormat.NONE },
  PERM3: { id: 'perm3', size: 1, nPop: 3, nPush: 3, format: OpFormat.NONE },
  PERM4: { id: 'perm4', size: 1, nPop: 4, nPush: 4, format: OpFormat.NONE },
  PERM5: { id: 'perm5', size: 1, nPop: 5, nPush: 5, format: OpFormat.NONE },
  SWAP: { id: 'swap', size: 1, nPop: 2, nPush: 2, format: OpFormat.NONE },
  SWAP2: { id: 'swap2', size: 1, nPop: 4, nPush: 4, format: OpFormat.NONE },
  ROT3L: { id: 'rot3l', size: 1, nPop: 3, nPush: 3, format: OpFormat.NONE },
  ROT3R: { id: 'rot3r', size: 1, nPop: 3, nPush: 3, format: OpFormat.NONE },
  ROT4L: { id: 'rot4l', size: 1, nPop: 4, nPush: 4, format: OpFormat.NONE },
  ROT5L: { id: 'rot5l', size: 1, nPop: 5, nPush: 5, format: OpFormat.NONE },

  // Function calls
  CALL_CONSTRUCTOR: { id: 'call_constructor', size: 3, nPop: 2, nPush: 1, format: OpFormat.NPOP },
  CALL: { id: 'call', size: 3, nPop: 1, nPush: 1, format: OpFormat.NPOP },
  TAIL_CALL: { id: 'tail_call', size: 3, nPop: 1, nPush: 0, format: OpFormat.NPOP },
  CALL_METHOD: { id: 'call_method', size: 3, nPop: 2, nPush: 1, format: OpFormat.NPOP },
  TAIL_CALL_METHOD: { id: 'tail_call_method', size: 3, nPop: 2, nPush: 0, format: OpFormat.NPOP },
  ARRAY_FROM: { id: 'array_from', size: 3, nPop: 0, nPush: 1, format: OpFormat.NPOP },
  APPLY: { id: 'apply', size: 3, nPop: 3, nPush: 1, format: OpFormat.U16 },
  RETURN: { id: 'return', size: 1, nPop: 1, nPush: 0, format: OpFormat.NONE },
  RETURN_UNDEF: { id: 'return_undef', size: 1, nPop: 0, nPush: 0, format: OpFormat.NONE },

  // Variables
  GET_VAR: { id: 'get_var', size: 5, nPop: 0, nPush: 1, format: OpFormat.ATOM },
  PUT_VAR: { id: 'put_var', size: 5, nPop: 1, nPush: 0, format: OpFormat.ATOM },
  PUT_VAR_INIT: { id: 'put_var_init', size: 5, nPop: 1, nPush: 0, format: OpFormat.ATOM },
  PUT_VAR_STRICT: { id: 'put_var_strict', size: 5, nPop: 2, nPush: 0, format: OpFormat.ATOM },
  
  // Locals
  GET_LOC: { id: 'get_loc', size: 3, nPop: 0, nPush: 1, format: OpFormat.LOC },
  PUT_LOC: { id: 'put_loc', size: 3, nPop: 1, nPush: 0, format: OpFormat.LOC },
  SET_LOC: { id: 'set_loc', size: 3, nPop: 1, nPush: 1, format: OpFormat.LOC },
  
  // Arguments
  GET_ARG: { id: 'get_arg', size: 3, nPop: 0, nPush: 1, format: OpFormat.ARG },
  PUT_ARG: { id: 'put_arg', size: 3, nPop: 1, nPush: 0, format: OpFormat.ARG },
  SET_ARG: { id: 'set_arg', size: 3, nPop: 1, nPush: 1, format: OpFormat.ARG },

  // Object/Array operations
  GET_FIELD: { id: 'get_field', size: 5, nPop: 1, nPush: 1, format: OpFormat.ATOM },
  GET_FIELD2: { id: 'get_field2', size: 5, nPop: 1, nPush: 2, format: OpFormat.ATOM },
  PUT_FIELD: { id: 'put_field', size: 5, nPop: 2, nPush: 0, format: OpFormat.ATOM },
  GET_ARRAY_EL: { id: 'get_array_el', size: 1, nPop: 2, nPush: 1, format: OpFormat.NONE },
  PUT_ARRAY_EL: { id: 'put_array_el', size: 1, nPop: 3, nPush: 0, format: OpFormat.NONE },
  DEFINE_FIELD: { id: 'define_field', size: 5, nPop: 2, nPush: 1, format: OpFormat.ATOM },
  DEFINE_ARRAY_EL: { id: 'define_array_el', size: 1, nPop: 3, nPush: 2, format: OpFormat.NONE },
  APPEND: { id: 'append', size: 1, nPop: 3, nPush: 2, format: OpFormat.NONE },

  // Control flow
  IF_FALSE: { id: 'if_false', size: 5, nPop: 1, nPush: 0, format: OpFormat.LABEL },
  IF_TRUE: { id: 'if_true', size: 5, nPop: 1, nPush: 0, format: OpFormat.LABEL },
  GOTO: { id: 'goto', size: 5, nPop: 0, nPush: 0, format: OpFormat.LABEL },
  
  // Arithmetic operations
  NEG: { id: 'neg', size: 1, nPop: 1, nPush: 1, format: OpFormat.NONE },
  PLUS: { id: 'plus', size: 1, nPop: 1, nPush: 1, format: OpFormat.NONE },
  DEC: { id: 'dec', size: 1, nPop: 1, nPush: 1, format: OpFormat.NONE },
  INC: { id: 'inc', size: 1, nPop: 1, nPush: 1, format: OpFormat.NONE },
  NOT: { id: 'not', size: 1, nPop: 1, nPush: 1, format: OpFormat.NONE },
  LNOT: { id: 'lnot', size: 1, nPop: 1, nPush: 1, format: OpFormat.NONE },

  MUL: { id: 'mul', size: 1, nPop: 2, nPush: 1, format: OpFormat.NONE },
  DIV: { id: 'div', size: 1, nPop: 2, nPush: 1, format: OpFormat.NONE },
  MOD: { id: 'mod', size: 1, nPop: 2, nPush: 1, format: OpFormat.NONE },
  ADD: { id: 'add', size: 1, nPop: 2, nPush: 1, format: OpFormat.NONE },
  SUB: { id: 'sub', size: 1, nPop: 2, nPush: 1, format: OpFormat.NONE },
  POW: { id: 'pow', size: 1, nPop: 2, nPush: 1, format: OpFormat.NONE },
  SHL: { id: 'shl', size: 1, nPop: 2, nPush: 1, format: OpFormat.NONE },
  SAR: { id: 'sar', size: 1, nPop: 2, nPush: 1, format: OpFormat.NONE },
  SHR: { id: 'shr', size: 1, nPop: 2, nPush: 1, format: OpFormat.NONE },

  // Comparison operations
  LT: { id: 'lt', size: 1, nPop: 2, nPush: 1, format: OpFormat.NONE },
  LTE: { id: 'lte', size: 1, nPop: 2, nPush: 1, format: OpFormat.NONE },
  GT: { id: 'gt', size: 1, nPop: 2, nPush: 1, format: OpFormat.NONE },
  GTE: { id: 'gte', size: 1, nPop: 2, nPush: 1, format: OpFormat.NONE },
  EQ: { id: 'eq', size: 1, nPop: 2, nPush: 1, format: OpFormat.NONE },
  NEQ: { id: 'neq', size: 1, nPop: 2, nPush: 1, format: OpFormat.NONE },
  STRICT_EQ: { id: 'strict_eq', size: 1, nPop: 2, nPush: 1, format: OpFormat.NONE },
  STRICT_NEQ: { id: 'strict_neq', size: 1, nPop: 2, nPush: 1, format: OpFormat.NONE },

  // Logical operations
  AND: { id: 'and', size: 1, nPop: 2, nPush: 1, format: OpFormat.NONE },
  XOR: { id: 'xor', size: 1, nPop: 2, nPush: 1, format: OpFormat.NONE },
  OR: { id: 'or', size: 1, nPop: 2, nPush: 1, format: OpFormat.NONE },

  // For loops
  FOR_IN_START: { id: 'for_in_start', size: 1, nPop: 1, nPush: 1, format: OpFormat.NONE },
  FOR_OF_START: { id: 'for_of_start', size: 1, nPop: 1, nPush: 3, format: OpFormat.NONE },
  FOR_IN_NEXT: { id: 'for_in_next', size: 1, nPop: 1, nPush: 3, format: OpFormat.NONE },
  FOR_OF_NEXT: { id: 'for_of_next', size: 2, nPop: 3, nPush: 5, format: OpFormat.U8 },

  // BigInt support
  PUSH_BIGINT_I32: { id: 'push_bigint_i32', size: 5, nPop: 0, nPush: 1, format: OpFormat.I32 },

  // Special opcode
  NOP: { id: 'nop', size: 1, nPop: 0, nPush: 0, format: OpFormat.NONE }
}
`

  const content = header + '\n' + compiledFlagsEnum + '\n' + opformatEnum + '\n' + opcodeEnum + '\n' + opcodeNameToCode + '\n' + atomEnum + '\n' + atomStrings + '\n' + opcodeDefs + '\n' + envBlock

  fs.writeFileSync('src/env.ts', content, 'utf-8')
  console.log('✓ Environment file src/env.ts generated successfully')
}

main().catch(e => {
  console.error(e)
  process.exit(1)
})
