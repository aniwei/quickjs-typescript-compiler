import { readFileSync, writeFileSync, existsSync, mkdirSync } from 'node:fs'
import { resolve, dirname } from 'node:path'

function main() {
  const atomHeader = resolve(process.cwd(), 'third_party/QuickJS/include/QuickJS/quickjs-atom.h')
  const verHeader = resolve(process.cwd(), 'third_party/QuickJS/include/QuickJS/extension/taro_js_bytecode.h')
  let firstAtom = 512
  try {
    const txt = readFileSync(atomHeader, 'utf8')
    const count = (txt.match(/\bDEF\s*\(/g) || []).length
    firstAtom = (count + 1) >>> 0
  } catch (e) {
    console.warn('[gen-env] warn: failed to read quickjs-atom.h, fallback FIRST_ATOM=', firstAtom)
  }

  let bcVersion = 5
  try {
    const txt = readFileSync(verHeader, 'utf8')
    // prefer CONFIG_BIGNUM branch if present in header; otherwise last define wins
    const m = txt.match(/#define\s+BC_VERSION\s+(0x[0-9a-fA-F]+|\d+)/g)
    if (m && m.length) {
      const last = m[m.length - 1]
      const vstr = last.split(/\s+/).pop() as string
      bcVersion = vstr.startsWith('0x') ? parseInt(vstr, 16) : parseInt(vstr, 10)
    }
  } catch (e) {
    console.warn('[gen-env] warn: failed to read taro_js_bytecode.h, fallback BC_VERSION=', bcVersion)
  }

  const outPath = resolve(process.cwd(), 'src/env.ts')
  const dir = dirname(outPath)
  if (!existsSync(dir)) mkdirSync(dir, { recursive: true })
  const content = `// auto-generated by scripts/gen-env.ts; DO NOT EDIT
// Synced from third_party/QuickJS headers at build time
export const FIRST_ATOM = ${firstAtom} // quickjs-atom.h DEF count + 1
export const BC_VERSION = ${bcVersion}
`
  writeFileSync(outPath, content, 'utf8')
  console.log('[gen-env] wrote', outPath)
}

if (require.main === module) main()
